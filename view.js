// Generated by CoffeeScript 1.6.2
(function() {
  var g, _ref;

  if ((_ref = this.vichrome) == null) {
    this.vichrome = {};
  }

  g = this.vichrome;

  $.fn.extend({
    isWithinScreen: function(padding) {
      var offset;

      if (padding == null) {
        padding = 10;
      }
      offset = $(this).offset();
      if (offset == null) {
        return false;
      }
      if (offset.left + padding > window.pageXOffset + window.innerWidth || offset.left - padding < window.pageXOffset) {
        return false;
      }
      if (offset.top + padding > window.pageYOffset + window.innerHeight || offset.top - padding < window.pageYOffset) {
        return false;
      }
      return true;
    },
    scrollTo: function(x, y, speed) {
      var left, newX, newY, offset, top;

      if (speed == null) {
        speed = 80;
      }
      offset = $($(this).get(0)).offset();
      if (!((x != null) || (y != null))) {
        if (offset == null) {
          return $(this);
        }
        if ($(this).isWithinScreen()) {
          return $(this);
        }
      }
      newX = offset.left - window.innerWidth / 2;
      newY = offset.top - window.innerHeight / 2;
      if (newX > document.body.scrollLeft - window.innerWidth) {
        newX - document.body.scrollLeft - window.innerWidth;
      }
      if (newY > document.body.scrollHeight - window.innerHeight) {
        newX = document.body.scrollHeight - window.innerHeight;
      }
      left = x != null ? x : newX;
      top = y != null ? y : newY;
      if (!g.model.getSetting("smoothScroll")) {
        speed = 0;
      }
      $(document.body).animate({
        scrollTop: top,
        scrollLeft: left
      }, speed);
      return $(this);
    },
    scrollBy: function(x, y, speed) {
      var left, top;

      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      if (speed == null) {
        speed = 35;
      }
      top = window.pageYOffset + y;
      left = window.pageXOffset + x;
      if (!g.model.getSetting("smoothScroll")) {
        speed = 0;
      }
      $(document.body).animate({
        scrollTop: top,
        scrollLeft: left
      }, speed);
      return $(this);
    }
  });

  $.extend($.expr[':'], {
    scrollable: function(elem) {
      var overflow;

      overflow = $.curCSS(elem, 'overflow');
      switch (overflow) {
        case "auto":
        case "scroll":
          return true;
      }
      return false;
    }
  });

  g.Surface = (function() {
    function Surface() {}

    Surface.prototype.init = function() {
      var align, path,
        _this = this;

      align = g.model.getSetting("commandBoxAlign");
      this.statusLine = $('<div id="vichromestatusline" />').addClass('vichrome-statuslineinactive').addClass("vichrome-statusline" + align).width(g.model.getSetting("commandBoxWidth"));
      this.statusLineActivated = false;
      if (typeof top !== "undefined" && top !== null) {
        path = chrome.extension.getURL("commandbox.html");
        this.iframe = $("<iframe src=\"" + path + "\" id=\"vichrome-commandframe\" seamless />");
        this.attach(this.iframe);
        this.iframe.hide();
      }
      $(document.body).click(function(e) {
        var _ref1;

        _this.scrollee = $(e.target).closest(":scrollable").get(0);
        return (_ref1 = _this.scrollee) != null ? _ref1 : _this.scrollee = window;
      });
      return this.initialized = true;
    };

    Surface.prototype.attach = function(w) {
      if (typeof top !== "undefined" && top !== null) {
        $('html').append(w);
      }
      return this;
    };

    Surface.prototype.activateStatusLine = function(isVisible) {
      if (isVisible == null) {
        isVisible = true;
      }
      if (this.slTimeout) {
        clearTimeout(this.slTimeout);
        this.slTimeout = void 0;
      }
      if (!this.statusLineActivated) {
        this.statusLine.removeClass('vichrome-statuslineinactive');
        this.attach(this.statusLine);
      }
      if (isVisible) {
        this.statusLine.show();
      } else {
        this.statusLine.hide();
      }
      this.statusLineActivated = true;
      return this;
    };

    Surface.prototype.inactiveStatusLine = function() {
      this.statusLine.addClass('vichrome-statuslineinactive');
      return this;
    };

    Surface.prototype.hideStatusLine = function() {
      var _ref1;

      if (typeof top === "undefined" || top === null) {
        chrome.extension.sendRequest({
          command: "TopFrame",
          innerCommand: "HideStatusLine"
        });
        return;
      }
      if (this.slTimeout != null) {
        clearTimeout(this.slTimeout);
        this.slTimeout = void 0;
      }
      if ((_ref1 = this.statusLine) != null) {
        _ref1.detach();
      }
      this.statusLineActivated = false;
      return this;
    };

    Surface.prototype.setStatusLineText = function(text, timeout, isVisible) {
      var _this = this;

      if (isVisible == null) {
        isVisible = true;
      }
      if (typeof top === "undefined" || top === null) {
        chrome.extension.sendRequest({
          command: "TopFrame",
          innerCommand: "SetStatusLine",
          text: text,
          timeout: timeout
        });
        return;
      }
      this.activateStatusLine(isVisible);
      this.statusLine.html(text);
      if (timeout) {
        this.slTimeout = setTimeout((function() {
          return _this.statusLine.html("").hide();
        }), timeout);
      }
      return this;
    };

    Surface.prototype.detach = function(w) {
      return w.detach();
    };

    Surface.prototype.focusInput = function(idx) {
      var _base;

      if (!this.initialized) {
        return this;
      }
      if (typeof (_base = $('form input:visible[type=text],form input:visible[type=password],textarea:visible').eq(idx)).scrollTo === "function") {
        _base.scrollTo().focus();
      }
      return this;
    };

    Surface.prototype.scrollBy = function(x, y) {
      if (!this.initialized) {
        return this;
      }
      $(document.body).scrollBy(x, y, 20);
      return this;
    };

    Surface.prototype.scrollHalfPage = function(a) {
      var block;

      if (!this.initialized) {
        return this;
      }
      block = window.innerHeight / 2;
      this.scrollBy(block * a.hor, block * a.ver);
      return this;
    };

    Surface.prototype.scrollTo = function(x, y) {
      if (!this.initialized) {
        return this;
      }
      $(document.body).scrollTo(x, y, 80);
      return this;
    };

    Surface.prototype.backHist = function() {
      if (!this.initialized) {
        return this;
      }
      window.history.back();
      return this;
    };

    Surface.prototype.forwardHist = function() {
      if (!this.initialized) {
        return this;
      }
      window.history.forward();
      return this;
    };

    Surface.prototype.reload = function() {
      if (!this.initialized) {
        return this;
      }
      window.location.reload();
      return this;
    };

    Surface.prototype.open = function(url, a) {
      if (!this.initialized) {
        return this;
      }
      window.open(url, a);
      return this;
    };

    Surface.prototype.goTop = function() {
      if (!this.initialized) {
        return this;
      }
      this.scrollTo(window.pageXOffset, 0);
      return this;
    };

    Surface.prototype.goBottom = function() {
      if (!this.initialized) {
        return this;
      }
      this.scrollTo(window.pageXOffset, document.body.scrollHeight - window.innerHeight);
      return this;
    };

    Surface.prototype.getHref = function() {
      return window.location.href;
    };

    Surface.prototype.blurActiveElement = function() {
      var _ref1;

      if (!this.initialized) {
        return this;
      }
      if ((_ref1 = document.activeElement) != null) {
        _ref1.blur();
      }
      return this;
    };

    Surface.prototype.hideCommandFrame = function() {
      if (typeof top === "undefined" || top === null) {
        chrome.extension.sendRequest({
          command: "TopFrame",
          innerCommand: "HideCommandFrame"
        });
        return;
      }
      return this.iframe.hide();
    };

    Surface.prototype.showCommandFrame = function() {
      var _ref1;

      return (_ref1 = this.iframe) != null ? _ref1.show() : void 0;
    };

    return Surface;

  })();

}).call(this);
